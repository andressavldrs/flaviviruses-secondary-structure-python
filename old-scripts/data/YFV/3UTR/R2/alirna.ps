%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Wed Nov 22 18:37:17 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGUGCAGGCUGGGACAGCCGACCUCCAGGUUGCGAAAAACCUGGUUUCUGGGACCUCCCACCCCAGAGUAAAAAGAACGGAGCCUCCGCUACCACCCUCCCACGUGGUGGUAGAAAGACGGGGUCUAGAGGUUAGAGGAGACCCUCCAGGGA\
) def
/coor [
[110.39704895 129.02748108]
[103.03080750 142.09417725]
[101.52585602 151.16780090]
[95.37681580 155.35128784]
[99.09009552 170.47904968]
[91.16523743 183.46562195]
[76.72033691 186.91244507]
[69.08737183 199.82514954]
[61.45439911 212.73783875]
[53.82143021 225.65054321]
[46.18845749 238.56323242]
[43.33345413 255.27507019]
[26.48438454 257.15792847]
[20.01081467 241.48855591]
[33.27576065 230.93026733]
[40.90872955 218.01756287]
[48.54170227 205.10487366]
[56.17467117 192.19216919]
[63.80764008 179.27947998]
[59.86335373 164.96241760]
[67.42032623 151.75837708]
[82.46411133 147.71830750]
[89.96411133 134.72793579]
[97.33035278 121.66123962]
[88.78989410 109.32994843]
[73.96741486 111.63082886]
[59.14493179 113.93170166]
[44.32244873 116.23257446]
[29.49996758 118.53345490]
[14.67748547 120.83432770]
[-0.14499681 123.13520050]
[-9.27037621 136.03880310]
[-24.86112595 138.62803650]
[-37.66753006 129.36672974]
[-40.09177399 113.74948120]
[-30.69560242 101.04170990]
[-15.05359077 98.78271484]
[-2.44587159 108.31272125]
[12.37661076 106.01184082]
[27.19909286 103.71096802]
[42.02157593 101.41009521]
[56.84405518 99.10922241]
[71.66654205 96.80834198]
[86.48902130 94.50746918]
[100.24185181 88.51917267]
[112.02398682 79.23578644]
[123.80612183 69.95240021]
[135.58825684 60.66901779]
[147.37039185 51.38563156]
[159.15254211 42.10224533]
[170.93467712 32.81885910]
[181.48669434 22.15795135]
[190.64862061 10.28112793]
[199.81056213 -1.59569561]
[208.97248840 -13.47251892]
[218.13442993 -25.34934235]
[227.29637146 -37.22616577]
[224.72741699 -54.50006866]
[235.21545410 -68.04011536]
[251.91290283 -69.80034637]
[260.82904053 -81.86277771]
[269.74520874 -93.92520905]
[278.66134644 -105.98764038]
[287.57751465 -118.05007172]
[281.06680298 -125.39716339]
[276.00497437 -133.86587524]
[272.58297729 -143.17224121]
[270.93658447 -153.00025940]
[271.14077759 -163.01254272]
[273.20684814 -172.86193848]
[277.08111572 -182.20358276]
[282.64630127 -190.70690918]
[289.72494507 -198.06741333]
[298.08514404 -204.01747131]
[307.44787598 -208.33613586]
[317.49664307 -210.85722351]
[327.88781738 -211.47566223]
[338.26269531 -210.15177917]
[342.21929932 -224.62055969]
[346.17590332 -239.08932495]
[350.13250732 -253.55809021]
[348.47827148 -270.43112183]
[364.23394775 -276.69168091]
[374.61145020 -263.28479004]
[364.60128784 -249.60147095]
[360.64468384 -235.13270569]
[356.68804932 -220.66394043]
[352.73144531 -206.19517517]
[364.79388428 -197.27902222]
[377.46539307 -205.30601501]
[390.13690186 -213.33302307]
[402.80844116 -221.36001587]
[415.47994995 -229.38700867]
[428.15145874 -237.41401672]
[440.82296753 -245.44100952]
[453.49450684 -253.46800232]
[466.08294678 -261.62466431]
[468.97982788 -277.16119385]
[482.06127930 -286.02972412]
[497.56631470 -282.96871948]
[506.29605103 -269.79425049]
[503.07128906 -254.32244873]
[489.80523682 -245.73248291]
[474.36840820 -249.12063599]
[470.50595093 -242.76502991]
[461.52148438 -240.79649353]
[448.84997559 -232.76948547]
[436.17846680 -224.74249268]
[423.50695801 -216.71549988]
[410.83541870 -208.68849182]
[398.16390991 -200.66149902]
[385.49240112 -192.63450623]
[372.82089233 -184.60751343]
[379.58706665 -164.96202087]
[378.74267578 -144.39808655]
[370.54675293 -125.73379517]
[356.25598145 -111.47476959]
[337.93411255 -103.47787476]
[318.15475464 -102.71014404]
[299.63992310 -109.13391876]
[290.72378540 -97.07148743]
[281.80761719 -85.00905609]
[272.89147949 -72.94662476]
[263.97534180 -60.88419342]
[267.65252686 -48.49748611]
[263.44305420 -36.07536697]
[252.67787170 -28.24645615]
[239.17318726 -28.06423187]
[230.01124573 -16.18740845]
[220.84931946 -4.31058407]
[211.68737793 7.56623983]
[202.52545166 19.44306374]
[193.36351013 31.31988716]
[198.58636475 33.50441360]
[203.49331665 36.45745468]
[208.00027466 40.14223099]
[215.36651611 53.20892715]
[222.73275757 66.27561951]
[237.11755371 74.15023041]
[237.21978760 90.54906464]
[222.93426514 98.60239410]
[208.95672607 90.02565765]
[209.66606140 73.64186096]
[202.29981995 60.57516479]
[194.93357849 47.50846863]
[180.21806335 44.60099792]
[168.43591309 53.88438416]
[156.65377808 63.16777039]
[144.87164307 72.45115662]
[133.08950806 81.73454285]
[121.30737305 91.01792145]
[109.52523804 100.30130768]
] def
/pairs [
[1 24]
[2 23]
[4 22]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[45 152]
[46 151]
[47 150]
[48 149]
[49 148]
[50 147]
[51 146]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[78 88]
[79 87]
[80 86]
[81 85]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 104]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
54 cmark
91 111 1 gmark
91 cmark
138 143 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
