%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Wed Nov 22 18:38:20 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACAAAUAGUGGGACCAUAUUGACGCCAGGGAAAGACCGGAGUGGUUCUCUGCUUUUCCUCCAGAGGUCUGUGAGCACAGUUUGCUCAAGAAUAAGCAGACCUUUGGAUGAAAAACACAAAACCACU\
) def
/coor [
[41.28452301 173.74182129]
[54.75422287 180.34237671]
[66.38781738 189.81124878]
[75.58559418 201.66032410]
[81.87342834 215.27880859]
[84.92716980 229.96467590]
[84.58941650 244.96087646]
[80.87757111 259.49435425]
[73.98297882 272.81594849]
[64.26104736 284.23892212]
[52.21294022 293.17440796]
[38.45972443 299.16180420]
[23.71037102 301.89248657]
[8.72520065 301.22567749]
[-5.72331429 297.19573975]
[-18.89036179 290.01040649]
[-30.09718895 280.04010010]
[-38.76609421 267.79876709]
[-44.45019913 253.91746521]
[-46.85649109 239.11172485]
[-45.86093140 224.14480591]
[-41.51483917 209.78822327]
[-34.04224777 196.78204346]
[-23.82837105 185.79675293]
[-11.40086651 177.39921570]
[-26.39971924 177.21368408]
[-35.12726593 180.26243591]
[-41.76605988 176.83349609]
[-56.75573730 176.27703857]
[-68.16594696 187.21243286]
[-83.96467590 186.79315186]
[-94.77880859 175.26795959]
[-94.19252014 159.47454834]
[-82.55364227 148.78286743]
[-66.76731110 149.53610229]
[-56.19928360 161.28736877]
[-41.20960617 161.84382629]
[-26.21419716 162.21484375]
[-11.21534443 162.40036011]
[3.12862444 158.01281738]
[15.45714569 149.46836853]
[27.78566742 140.92391968]
[40.11418915 132.37947083]
[52.44271088 123.83502960]
[64.77123260 115.29058075]
[77.09975433 106.74613953]
[77.48645782 92.05820465]
[86.40109253 80.37854767]
[100.46686554 76.13132477]
[114.35579681 80.92533875]
[126.68431854 72.38089752]
[133.61930847 58.16060638]
[148.48725891 57.27007294]
[160.81578064 48.72562790]
[173.14430237 40.18118286]
[185.47282410 31.63673592]
[197.80134583 23.09228897]
[204.73634338 8.87200260]
[219.60429382 7.98146868]
[231.93281555 -0.56297702]
[244.26133728 -9.10742283]
[256.58987427 -17.65186882]
[268.91839600 -26.19631386]
[281.24691772 -34.74076080]
[293.57543945 -43.28520584]
[305.90396118 -51.82965088]
[318.23248291 -60.37409973]
[330.56100464 -68.91854095]
[342.88952637 -77.46298981]
[355.21804810 -86.00743866]
[367.54656982 -94.55187988]
[378.97070312 -104.27242279]
[389.37869263 -115.07396698]
[399.78671265 -125.87551880]
[410.19473267 -136.67706299]
[420.60272217 -147.47860718]
[421.74392700 -163.48101807]
[435.04769897 -172.44702148]
[450.30853271 -167.49865723]
[455.81964111 -152.43188477]
[447.35333252 -138.80465698]
[431.40426636 -137.07060242]
[420.99627686 -126.26905823]
[410.58825684 -115.46751404]
[400.18026733 -104.66596222]
[389.77224731 -93.86441803]
[404.76721191 -94.25256348]
[417.23342896 -85.91027832]
[422.59353638 -71.90066528]
[418.87942505 -57.36775589]
[407.45486450 -47.64772034]
[392.51467896 -46.30954361]
[379.54458618 -53.84457779]
[373.30691528 -67.48611450]
[376.09100342 -82.22335815]
[363.76248169 -73.67891693]
[351.43395996 -65.13446808]
[339.10543823 -56.59002304]
[326.77691650 -48.04557800]
[314.44839478 -39.50112915]
[302.11987305 -30.95668411]
[289.79135132 -22.41223907]
[277.46282959 -13.86779308]
[265.13430786 -5.32334709]
[252.80578613 3.22109866]
[240.47726440 11.76554489]
[228.14874268 20.30998993]
[222.09558105 33.91912079]
[206.34579468 35.42081070]
[194.01727295 43.96525574]
[181.68875122 52.50970459]
[169.36022949 61.05414963]
[157.03170776 69.59859467]
[150.97854614 83.20772552]
[135.22877502 84.70941925]
[122.90024567 93.25386047]
[122.51354218 107.94179535]
[113.59890747 119.62145233]
[99.53313446 123.86867523]
[85.64420319 119.07466125]
[73.31568146 127.61910248]
[60.98715591 136.16355896]
[48.65863419 144.70799255]
[36.33011246 153.25244141]
[24.00159264 161.79689026]
[11.67306995 170.34133911]
] def
/pairs [
[25 39]
[26 38]
[28 37]
[29 36]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[46 120]
[50 116]
[51 115]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
42 124 1 gmark
55 111 2 gmark
64 cmark

% End Annotations
% show it
showpage
end
%%EOF
